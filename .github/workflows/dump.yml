on: push
jobs:
  dump:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      SUFFIX: -${{ github.run_id }}
    steps:
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Create Script
      run: |
        var fs = require("fs");
        var token = setInterval(() => {
            console.log("Bytes read: " + process.stdin.bytesRead);
        }, 5000);
        (async () => {
            try {
                var token = "";
                var refresh = async () => {
                  var resp = await fetch("https://ghcr.io/token?service=registry.docker.io&scope=repository:${{ github.repository_owner }}/runner-images:pull,push",  { method: "GET", redirect: "manual", credentials: "include", headers: {
                      "Authorization": "Basic " + btoa("${{ github.actor }}:${{ github.token }}")
                  } });
                  console.log(JSON.stringify(resp.status));
                  token = (await resp.json()).token;
                }
                if(process.env.UPLOAD_LAYER) {
                  await refresh();
                  var resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/blobs/uploads/", { method: "POST", redirect: "manual", body: "", credentials: "include", headers: {
                      "Authorization": "Bearer " + token
                  } });
                  console.log(JSON.stringify(resp.status));
                  var location = resp.headers.get("Location");
                  console.log("NEXT_URL:" + location);
                  resp = await fetch("https://ghcr.io" + location, { method: "PATCH", redirect: "manual", body: process.stdin, duplex: "half", credentials: "include", headers: {
                      "Content-Type": "application/octet-stream",
                      "Authorization": "Bearer " + token
                  } });
                  console.log(JSON.stringify(resp.status));
                  location = resp.headers.get("Location");
                  console.log("NEXT_URL:" + location);
                  await refresh();
                  var url = "https://ghcr.io" + location + "?digest=sha256:" + (await fs.promises.readFile("sha2.txt", { encoding: "utf-8" })).trim();
                  console.log("url:" + url);
                  resp = await fetch(url, { method: "PUT", redirect: "manual", duplex: "half", credentials: "include", headers: {
                      "Content-Type": "application/octet-stream",
                      "Content-Length": "0",
                      "Authorization": "Bearer " + token
                  } });
                  console.log(JSON.stringify(resp.status));
                  location = resp.headers.get("Location");
                  console.log("NEXT_URL:" + location);
                }
                clearInterval(token);

                var environment = await fs.promises.readFile("/etc/environment", { encoding: "utf-8" });
                var envmap = [];
                var trimQuotes = str => {
                  if(str.startsWith("\"") && str.endsWith("\"")) {
                    return str.substring(1, str.length - 1);
                  }
                  return str;
                };
                for(var line of environment.split("\n")) {
                  if(line.length > 0) {
                    var i = line.indexOf("=");
                    envmap.push(line.substring(0, i) + "=" + trimQuotes(line.substring(i + 1)));
                  }
                }
                
                var config = {
                  "architecture": "amd64",
                  "os": "linux",
                  "config": {
                    "Env": envmap,
                    "Entrypoint": ["bash"]
                  },
                  "rootfs": {
                    "type": "layers",
                    "diff_ids": []
                  }
                };

                if(process.env.DIFF_IDS) {
                  var diff_ids = JSON.parse(process.env.DIFF_IDS);
                  config.rootfs.diff_ids = diff_ids.concat(config.rootfs.diff_ids);
                }
                if(process.env.UPLOAD_LAYER) {
                  var diff_id = "sha256:" + (await fs.promises.readFile("sha.txt", { encoding: "utf-8" })).trim()
                  config.rootfs.diff_ids.push(diff_id);
                  await fs.promises.writeFile(process.env.GITHUB_OUTPUT, "diff_id=" + diff_id + "\n", { encoding: "utf-8" })
                }

                var strconfig = JSON.stringify(config);
                console.log(strconfig);
                var crypto = require('crypto');
                var hash = crypto.createHash('sha256').update(strconfig).digest('hex');
                await refresh();
                var resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/blobs/uploads/", { method: "POST", redirect: "manual", body: "", credentials: "include", headers: {
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                var location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                resp = await fetch("https://ghcr.io" + location, { method: "PATCH", redirect: "manual", body: strconfig, duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                await refresh();
                url = "https://ghcr.io" + location + "?digest=sha256:" + hash;
                console.log("url:" + url);
                resp = await fetch(url, { method: "PUT", redirect: "manual", duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Content-Length": "0",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);

                var manifest = {
                  "schemaVersion": 2,
                  "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
                  "config": {
                    "mediaType": "application/vnd.docker.container.image.v1+json",
                    "size": strconfig.length,
                    "digest": "sha256:" + hash
                  },
                  "layers": []
                };
                if(process.env.LAYERS) {
                  var layers = JSON.parse(process.env.LAYERS);
                  manifest.layers = layers.concat(manifest.layers);
                }
                if(process.env.UPLOAD_LAYER) {
                  var layer = {
                    "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                    "size": process.stdin.bytesRead,
                    "digest": "sha256:" + (await fs.promises.readFile("sha2.txt", { encoding: "utf-8" })).trim()
                  };
                  manifest.layers.push(layer);
                  await fs.promises.writeFile(process.env.GITHUB_OUTPUT, "layer=" + layer + "\n", { encoding: "utf-8" })
                }
                var strmanifest = JSON.stringify(manifest);
                console.log(strmanifest);
                
                await refresh();
                resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/manifests/" + process.env.TAG, { method: "PUT", redirect: "manual", body: strmanifest, duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/vnd.docker.distribution.manifest.v2+json",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                
                process.exitCode = 0;
            } catch(ex) {
                console.log(ex);
                process.exitCode = 1;
            } finally {
                clearInterval(token);
            }
            process.exit();
        })()
      shell: mv {0} script.js
    - name: Dump Base Image
      id: baseImage
      run: |
        sudo tar -C / -c "--exclude=$GITHUB_WORKSPACE" "--exclude=/proc" "--exclude=/dev" "--exclude=/run" "--exclude=/sys" "--exclude=/tmp" "--exclude=/opt" "--exclude=/var" "--exclude=/usr/local"  "--exclude=/mnt" "--exclude=/snap" "--exclude=/boot" "--exclude=/data" "--exclude=/boot" "--exclude=/imagegeneration/installers/*.tar.*" "--exclude=/home/runner/runners" "--exclude=/home/runner/work" "--exclude=/usr/share/dotnet" "--exclude=/usr/share/swift" "--exclude=/usr/share/miniconda" "--exclude=/usr/lib/google-cloud-sdk" "--exclude=/usr/lib/jvm" "--exclude=/usr/lib/mono" "--exclude=/usr/lib/gcc" "--exclude=/usr/lib/llvm-*" "--exclude=/usr/lib/firefox" "--exclude=/usr/lib/python3" / | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-base${{ env.SUFFIX }}
      shell: bash
    - name: Dump /usr/local
      id: usr-local
      run: |
        sudo tar -C / -c "--exclude=/usr/local/lib/android" /usr/local | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-usr-local${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /opt
      id: opt
      run: |
        sudo tar -C / -c /opt | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-opt${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/share/dotnet
      id: dotnet
      run: |
        sudo tar -C / -c /usr/share/dotnet | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-dotnet${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/share/swift
      id: swift
      run: |
        sudo tar -C / -c /usr/share/swift | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-swift${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/share/miniconda
      id: miniconda
      run: |
        sudo tar -C / -c /usr/share/miniconda | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-miniconda${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/lib/google-cloud-sdk
      id: google-cloud-sdk
      run: |
        sudo tar -C / -c /usr/lib/google-cloud-sdk | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-google-cloud-sdk${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/lib/jvm
      id: jvm
      run: |
        sudo tar -C / -c /usr/lib/jvm | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-jvm${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /usr/lib/mono
      id: mono
      run: |
        sudo tar -C / -c /usr/lib/mono | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-mono${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump gcc
      id: gcc
      run: |
        sudo tar -C / -c /usr/lib/gcc | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-gcc${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump llvm
      id: llvm
      run: |
        sudo tar -C / -c /usr/lib/llvm-* | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-llvm${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }},
            ${{ steps.gcc.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }},
            ${{ steps.gcc.outputs.layer }}
          ]
      shell: bash
    - name: Dump firefox
      id: firefox
      run: |
        sudo tar -C / -c /usr/lib/firefox | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-firefox${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump python3
      id: python3
      run: |
        sudo tar -C / -c /usr/lib/python3 | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-python3${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump android
      id: android
      run: |
        sudo tar -C / -c /usr/local/lib/android | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-usr-android${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Dump /snap
      id: snap
      run: |
        sudo tar -C / -c /snap | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
      env:
        UPLOAD_LAYER: 1
        TAG: runner-snap${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }}
          ]
      shell: bash
    - name: Upload runner-use-local-opt
      run: |
        node script.js
      env:
        TAG: runner-use-local-opt${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }},
            ${{ steps.usr-local.outputs.diff_id }},
            ${{ steps.opt.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }},
            ${{ steps.usr-local.outputs.layer }},
            ${{ steps.opt.outputs.layer }}
          ]
      shell: bash
    - name: Upload runner-use-local-opt-snap
      run: |
        node script.js
      env:
        TAG: runner-use-local-opt-snap${{ env.SUFFIX }}
        DIFF_IDS: |
          [
            ${{ steps.baseImage.outputs.diff_id }},
            ${{ steps.usr-local.outputs.diff_id }},
            ${{ steps.opt.outputs.diff_id }},
            ${{ steps.snap.outputs.diff_id }},
            ${{ steps.dotnet.outputs.diff_id }},
            ${{ steps.swift.outputs.diff_id }},
            ${{ steps.miniconda.outputs.diff_id }},
            ${{ steps.google-cloud-sdk.outputs.diff_id }},
            ${{ steps.jvm.outputs.diff_id }},
            ${{ steps.mono.outputs.diff_id }},
            ${{ steps.gcc.outputs.diff_id }},
            ${{ steps.llvm.outputs.diff_id }},
            ${{ steps.firefox.outputs.diff_id }},
            ${{ steps.python3.outputs.diff_id }},
            ${{ steps.android.outputs.diff_id }}
          ]
        LAYERS: |
          [
            ${{ steps.baseImage.outputs.layer }},
            ${{ steps.usr-local.outputs.layer }},
            ${{ steps.opt.outputs.layer }},
            ${{ steps.snap.outputs.layer }},
            ${{ steps.dotnet.outputs.layer }},
            ${{ steps.swift.outputs.layer }},
            ${{ steps.miniconda.outputs.layer }},
            ${{ steps.google-cloud-sdk.outputs.layer }},
            ${{ steps.jvm.outputs.layer }},
            ${{ steps.mono.outputs.layer }},
            ${{ steps.gcc.outputs.layer }},
            ${{ steps.llvm.outputs.layer }},
            ${{ steps.firefox.outputs.layer }},
            ${{ steps.python3.outputs.layer }},
            ${{ steps.android.outputs.layer }}
          ]
      shell: bash