on: push
jobs:
  dump:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20
    - name: Dump /etc/environment
      run: |
        cat /etc/environment
      shell: bash
    - name: Create Script
      run: |
        var fs = require("fs");
        var token = setInterval(() => {
            console.log("Bytes read: " + process.stdin.bytesRead);
        }, 5000);
        (async () => {
            try {
                var token = "";
                var refresh = async () => {
                  var resp = await fetch("https://ghcr.io/token?service=registry.docker.io&scope=repository:${{ github.repository_owner }}/runner-images:pull,push",  { method: "GET", redirect: "manual", credentials: "include", headers: {
                      "Authorization": "Basic " + btoa("${{ github.actor }}:${{ github.token }}")
                  } });
                  console.log(JSON.stringify(resp.status));
                  token = (await resp.json()).token;
                }
                await refresh();
                var resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/blobs/uploads/", { method: "POST", redirect: "manual", body: "", credentials: "include", headers: {
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                var location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                resp = await fetch("https://ghcr.io" + location, { method: "PATCH", redirect: "manual", body: process.stdin, duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                await refresh();
                var url = "https://ghcr.io" + location + "?digest=sha256:" + (await fs.promises.readFile("sha2.txt", { encoding: "utf-8" })).trim();
                console.log("url:" + url);
                resp = await fetch(url, { method: "PUT", redirect: "manual", duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Content-Length": "0",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);

                clearInterval(token);

                var environment = await fs.promises.readFile("/etc/environment", { encoding: "utf-8" });
                var envmap = [];
                var trimQuotes = str => {
                  if(str.startsWith("\"") && str.endsWith("\"")) {
                    return str.substring(1, str.length - 1);
                  }
                  return str;
                };
                for(var line of environment.split("\n")) {
                  if(line.length > 0) {
                    var i = line.indexOf("=");
                    envmap.push(line.substring(0, i) + "=" + trimQuotes(line.substring(i + 1)));
                  }
                }
                
                var config = {
                  "architecture": "amd64",
                  "os": "linux",
                  "config": {
                    "Env": envmap,
                    "Entrypoint": ["bash"]
                  },
                  "rootfs": {
                    "type": "layers",
                    "diff_ids": [
                      "sha256:" + (await fs.promises.readFile("sha.txt", { encoding: "utf-8" })).trim()
                    ]
                  }
                };

                var strconfig = JSON.stringify(config);
                console.log(strconfig);
                var crypto = require('crypto');
                var hash = crypto.createHash('sha256').update(strconfig).digest('hex');
                await refresh();
                resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/blobs/uploads/", { method: "POST", redirect: "manual", body: "", credentials: "include", headers: {
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                resp = await fetch("https://ghcr.io" + location, { method: "PATCH", redirect: "manual", body: strconfig, duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);
                await refresh();
                url = "https://ghcr.io" + location + "?digest=sha256:" + hash;
                console.log("url:" + url);
                resp = await fetch(url, { method: "PUT", redirect: "manual", duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/octet-stream",
                    "Content-Length": "0",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                location = resp.headers.get("Location");
                console.log("NEXT_URL:" + location);

                var manifest = {
                  "schemaVersion": 2,
                  "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
                  "config": {
                    "mediaType": "application/vnd.docker.container.image.v1+json",
                    "size": strconfig.length,
                    "digest": "sha256:" + hash
                  },
                  "layers": [
                    {
                      "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                      "size": process.stdin.bytesRead,
                      "digest": "sha256:" + (await fs.promises.readFile("sha2.txt", { encoding: "utf-8" })).trim()
                    }
                  ]
                };
                var strmanifest = JSON.stringify(manifest);
                console.log(strmanifest);
                
                await refresh();
                resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/runner-images/manifests/runner-latest-var-no-opt-local", { method: "PUT", redirect: "manual", body: strmanifest, duplex: "half", credentials: "include", headers: {
                    "Content-Type": "application/vnd.docker.distribution.manifest.v2+json",
                    "Authorization": "Bearer " + token
                } });
                console.log(JSON.stringify(resp.status));
                
                process.exitCode = 0;
            } catch(ex) {
                console.log(ex);
                process.exitCode = 1;
            } finally {
                clearInterval(token);
            }
            process.exit();
        })()
      shell: mv {0} script.js
    - name: Dump Image
      id: dump_image
      run: |
        touch sha.txt
        touch sha2.txt
        sudo tar -C / -c "--exclude=$GITHUB_WORKSPACE" "--exclude=/proc" "--exclude=/dev" "--exclude=/run" "--exclude=/sys" "--exclude=/tmp" "--exclude=/opt" "--exclude=/usr/local" / | tee >(sha256sum | awk '{ print $1 }' > sha.txt) | gzip -9 -c | tee >(sha256sum | awk '{ print $1 }' > sha2.txt) | node script.js
        echo "Sha is"
        cat sha.txt
        echo "Sha2 is"
        cat sha2.txt
      shell: bash
